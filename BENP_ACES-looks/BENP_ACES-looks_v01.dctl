// ACES 1.2 Look Shaders
// utilises ACES library 1.2 from https://github.com/baldavenger/ACES_DCTL/blob/master/ACES_LIB.h

DEFINE_UI_PARAMS(cs_input, Input Colour Space, DCTLUI_COMBO_BOX, 0, { ACESCCTIN, LOGCAWGIN, LOG3G10RWGIN, SLOG3SG3CIN }, { ACEScct / AP1, ALEXA LogC / Alexa Wide Gamut, RED Log3g10 / Wide Gamut RGB, Sony SLog3 / SGamut3Cine})
DEFINE_UI_PARAMS(mid_grey, Tone Split, DCTLUI_SLIDER_FLOAT, 0.435, 0, 1, 0.001)
DEFINE_UI_PARAMS(tone_str, Tone Strength, DCTLUI_SLIDER_FLOAT, 1, 0, 2, 0.001)
DEFINE_UI_PARAMS(tone_select, Tone Profile, DCTLUI_COMBO_BOX, 0, { t001 }, { T001 })
DEFINE_UI_PARAMS(look_str, Look Strength, DCTLUI_SLIDER_FLOAT, 1, 0, 3, 0.001)
DEFINE_UI_PARAMS(look_select, Look Profile, DCTLUI_COMBO_BOX, 0, { l001 }, { L001 })
DEFINE_UI_PARAMS(skin_r, Skin Target R, DCTLUI_SLIDER_FLOAT, 113, 0, 255, 1)
DEFINE_UI_PARAMS(skin_g, Skin Target G, DCTLUI_SLIDER_FLOAT, 109, 0, 255, 1)
DEFINE_UI_PARAMS(skin_b, Skin Target B, DCTLUI_SLIDER_FLOAT, 103, 0, 255, 1)
DEFINE_UI_PARAMS(skin_str, Skin Bypass, DCTLUI_SLIDER_FLOAT, 0, 0, 1, 0.001)
DEFINE_UI_PARAMS(skin_show, Show Skin Matte, DCTLUI_CHECK_BOX, 0)
DEFINE_UI_PARAMS(cs_output, Output Colour Space, DCTLUI_COMBO_BOX, 4, { ACESCCTOUT, LOGCAWGOUT, LOG3G10RWGOUT, SLOG3SG3COUT, RRTODT_REC709,P3D6548, RRTODT_P3D651000ST2084 }, { ACEScct / AP1, ALEXA LogC / Alexa Wide Gamut, RED Log3g10 / Wide Gamut RGB, Sony SLog3 / SGamut3Cine, Gamma 2.4 100nits / Rec709, Gamma 2.6 48nits / P3 D65, ST2084 1000nits / P3 D65})

#include "ACES_LIB.h"
#include "BENP_ACES_Tones.h"
#include "BENP_ACES_Looks.h"

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

float3 ipt = make_float3(p_R, p_G, p_B);


float3 pre_rgb;
  if (cs_input == ACESCCTIN) pre_rgb = ACEScct_to_ACES(ipt);
  if (cs_input == LOGCAWGIN) pre_rgb = LogC_EI800_AWG_to_ACES(ipt);
  if (cs_input == LOG3G10RWGIN) pre_rgb = Log3G10_RWG_to_ACES(ipt);
  if (cs_input == SLOG3SG3CIN) pre_rgb = SLog3_SG3C_to_ACES(ipt);
  pre_rgb = ACES_to_ACEScct(pre_rgb);


float3 look_rgb;
  if (look_select == l001) look_rgb = (look_str * look_001(pre_rgb)) + (pre_rgb * ( 1 - look_str));


float3 tone_rgb;


float3 skin_rgb;
// float3 skin_target = make_float3((skin_r / 255), (skin_g / 255), (skin_b / 255));
// float skin_alpha = skin_bypass(pre_rgb, skin_target, skin_str) * skin_str;
// skin_rgb = ((skin_alpha * pre_rgb) + (tone_rgb * ( 1 - skin_alpha)));


float3 post_rgb = ACEScct_to_ACES(pre_rgb);


float3 opt;
  if (cs_output == ACESCCTOUT) opt = ACES_to_ACEScct(post_rgb);
  if (cs_output == LOGCAWGOUT) opt = ACES_to_LogC_EI800_AWG(post_rgb);
  if (cs_output == LOG3G10RWGOUT) opt = ACES_to_Log3G10_RWG(post_rgb);
  if (cs_output == SLOG3SG3COUT) opt = ACES_to_SLog3_SG3C(post_rgb);
  if (cs_output == RRTODT_REC709) opt = RRTODT_Rec709_100nits_10nits_BT1886(post_rgb);
  if (cs_output == P3D6548) opt = ODT_P3D65_48nits(RRT(post_rgb));
  if (cs_output == RRTODT_P3D651000ST2084) opt = RRTODT_P3D65_1000nits_15nits_ST2084(post_rgb);


// if (skin_show == 1) {opt = skin_alpha;}
return opt;
}
